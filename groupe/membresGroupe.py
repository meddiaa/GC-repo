# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'membresGroupe.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector
from groupe.ajouterMembreGroupe import Ui_ajouterMembreGroupe
from connexion_DB import connect_to_DB

class Ui_Groupe(object):
    def __init__(self, ID_groupe):
        self.ID_groupe = ID_groupe


    def setupUi(self, Groupes):
        Groupes.setObjectName("Groupes")
        Groupes.resize(1400, 600)
        Groupes.setStyleSheet("background-color: rgb(210, 210, 210);")
        self.gridLayout = QtWidgets.QGridLayout(Groupes)
        self.gridLayout.setObjectName("gridLayout")
        self.topheader = QtWidgets.QWidget(Groupes)
        self.topheader.setStyleSheet("\n"
"background-color:  rgb(210, 210, 210)")
        self.topheader.setObjectName("topheader")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.topheader)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.topheader)
        font = QtGui.QFont()
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(26, 61, 119);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.gridLayout.addWidget(self.topheader, 0, 0, 1, 1)
        self.table = QtWidgets.QWidget(Groupes)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.table.setFont(font)
        self.table.setStyleSheet("\n"
"background-color:  rgb(210, 210, 210)")
        self.table.setObjectName("table")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.table)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tableWidget = QtWidgets.QTableWidget(self.table)
        font = QtGui.QFont()
        font.setPointSize(1)
        self.tableWidget.setFont(font)
        self.tableWidget.setStyleSheet("QHeaderView::section {background-color: rgb(210, 210, 210);\n"
"border: 1px solid rgb(26, 61, 119);\n"
"font-size: 12pt;\n"
"font:bold;}\n"
"QTableView {\n"
"border: 2px solid rgb(26, 61, 119);\n"
"border-top:1px solid rgb(26, 61, 119);\n"
"}\n"
"")
        self.tableWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.tableWidget.setMidLineWidth(0)
        self.tableWidget.setAutoScroll(True)
        self.tableWidget.setAutoScrollMargin(5)
        self.tableWidget.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setCornerButtonEnabled(True)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.tableWidget.horizontalHeader().setVisible(True)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(191)
        self.tableWidget.horizontalHeader().setHighlightSections(False)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(39)
        self.tableWidget.horizontalHeader().setStretchLastSection(False)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.verticalHeader().setDefaultSectionSize(38)
        self.verticalLayout.addWidget(self.tableWidget)
        self.gridLayout.addWidget(self.table, 2, 0, 1, 1)
        self.FilterButton = QtWidgets.QWidget(Groupes)
        self.FilterButton.setStyleSheet("\n"
"background-color:  rgb(210, 210, 210)")
        self.FilterButton.setObjectName("FilterButton")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.FilterButton)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.filterdropdown = QtWidgets.QComboBox(self.FilterButton)
        self.filterdropdown.setMinimumSize(QtCore.QSize(250, 30))
        self.filterdropdown.setMaximumSize(QtCore.QSize(150, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.filterdropdown.setFont(font)
        self.filterdropdown.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.filterdropdown.setStyleSheet("background-color: rgb(231, 231, 231);\n"
"color: rgb(163, 163, 163);")
        self.filterdropdown.setEditable(False)
        self.filterdropdown.setObjectName("filterdropdown")
        self.filterdropdown.addItem("")
        self.filterdropdown.addItem("")
        self.filterdropdown.addItem("")
        self.filterdropdown.addItem("")
        self.filterdropdown.addItem("")
        self.filterdropdown.addItem("")
        self.filterdropdown.addItem("")
        self.horizontalLayout.addWidget(self.filterdropdown)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.recherche = QtWidgets.QLineEdit(self.FilterButton)
        self.recherche.setMinimumSize(QtCore.QSize(500, 30))
        self.recherche.setMaximumSize(QtCore.QSize(250, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.recherche.setFont(font)
        self.recherche.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.recherche.setStyleSheet("background-color: rgb(231, 231, 231);\n"
"color: rgb(163, 163, 163);\n"
"border-radius:2px")
        self.recherche.setInputMask("")
        self.recherche.setDragEnabled(False)
        self.recherche.setReadOnly(False)
        self.recherche.setClearButtonEnabled(False)
        self.recherche.setObjectName("recherche")
        self.horizontalLayout.addWidget(self.recherche)
        self.searchButton = QtWidgets.QPushButton(self.FilterButton)
        self.searchButton.setMinimumSize(QtCore.QSize(40, 40))
        self.searchButton.setMaximumSize(QtCore.QSize(40, 40))
        self.searchButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.searchButton.setStyleSheet("background-color: rgb(231, 231, 231);\n"
"border-radius:10px;\n"
"border:1px solid rgb(26, 61, 119);")
        self.searchButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/loupe.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.searchButton.setIcon(icon)
        self.searchButton.setIconSize(QtCore.QSize(20, 20))
        self.searchButton.setCheckable(True)
        self.searchButton.setObjectName("searchButton")
        self.horizontalLayout.addWidget(self.searchButton)
        spacerItem2 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.ajouter = QtWidgets.QPushButton(self.FilterButton)
        self.ajouter.setMinimumSize(QtCore.QSize(50, 50))
        self.ajouter.setMaximumSize(QtCore.QSize(50, 50))
        font = QtGui.QFont()
        font.setPointSize(1)
        self.ajouter.setFont(font)
        self.ajouter.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.ajouter.setStyleSheet("background-color: rgb(26, 61, 119);\n"
"border-radius:5px")
        self.ajouter.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/add (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ajouter.setIcon(icon1)
        self.ajouter.setIconSize(QtCore.QSize(35, 35))
        self.ajouter.setCheckable(True)
        self.ajouter.setObjectName("ajouter")
        self.horizontalLayout.addWidget(self.ajouter)
        spacerItem3 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.supprimer = QtWidgets.QPushButton(self.FilterButton)
        self.supprimer.setMinimumSize(QtCore.QSize(50, 50))
        self.supprimer.setMaximumSize(QtCore.QSize(50, 50))
        self.supprimer.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.supprimer.setStyleSheet("background-color: rgb(26, 61, 119);\n"
"border-radius:5px;")
        self.supprimer.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/delete (1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.supprimer.setIcon(icon2)
        self.supprimer.setIconSize(QtCore.QSize(35, 35))
        self.supprimer.setCheckable(True)
        self.supprimer.setObjectName("supprimer")
        self.horizontalLayout.addWidget(self.supprimer)
        spacerItem4 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)

        spacerItem5 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
        self.gridLayout.addWidget(self.FilterButton, 1, 0, 1, 1)

        self.retranslateUi(Groupes)
        QtCore.QMetaObject.connectSlotsByName(Groupes)
        self.affichage_membres()
        self.searchButton.clicked.connect(self.rechercher)
        self.supprimer.clicked.connect(self.suppression)
        self.ajouter.clicked.connect(self.ouverture_page_ajout_membre)

    def ouverture_page_ajout_membre(self):
        self.Groupemembres = QtWidgets.QWidget()
        self.ui2 = Ui_ajouterMembreGroupe(self.ID_groupe)
        self.ui2.setupUi(self.Groupemembres)
        self.Groupemembres.show()

    def retranslateUi(self, Groupes):
        _translate = QtCore.QCoreApplication.translate
        Groupes.setWindowTitle(_translate("Groupes", "membresGroupe"))
        self.label.setText(_translate("Groupes", "Membres Du Groupe " + self.ID_groupe))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Groupes", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Groupes", "Nom"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Groupes", "Prenom"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Groupes", "Sexe"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Groupes", "Age"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Groupes", "Poids"))
        self.filterdropdown.setItemText(0, _translate("Groupes", "choisir"))
        self.filterdropdown.setItemText(1, _translate("Groupes", "ID"))
        self.filterdropdown.setItemText(2, _translate("Groupes", "Nom"))
        self.filterdropdown.setItemText(3, _translate("Groupes", "Prenom"))
        self.filterdropdown.setItemText(4, _translate("Groupes", "Sexe"))
        self.filterdropdown.setItemText(5, _translate("Groupes", "Age"))
        self.filterdropdown.setItemText(6, _translate("Groupes", "Poids"))
        self.recherche.setText(_translate("Groupes", "rechercher"))

    def affichage_membres(self):
        connection, cursor = connect_to_DB()

        query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s;"
        cursor.execute(query,(self.ID_groupe,))
        data = cursor.fetchall()
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        for numero_ligne, donnees_ligne in enumerate(data):
            self.tableWidget.insertRow(numero_ligne)
            for numero_colonne, donnee_colonne in enumerate(donnees_ligne):
                item = QtWidgets.QTableWidgetItem(str(donnee_colonne))
                item.setFont(QtGui.QFont("Arial", 15))
                self.tableWidget.setItem(numero_ligne, numero_colonne, item)

    def rechercher(self):
        connection, cursor = connect_to_DB()

        critere_rech = self.filterdropdown.currentText()
        texte_rech = self.recherche.text()
        try:
            try:
                if critere_rech == "ID":
                    query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s and ID = %s;"
                    cursor.execute(query,(self.ID_groupe,texte_rech,))
                elif critere_rech == "Nom":
                    query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s and nom = %s;"
                    cursor.execute(query, (self.ID_groupe, texte_rech,))
                elif critere_rech == "Prenom":
                    query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s and prénom = %s;"
                    cursor.execute(query, (self.ID_groupe, texte_rech,))
                elif critere_rech == "Sexe":
                    query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s and sexe = %s;"
                    cursor.execute(query, (self.ID_groupe, texte_rech,))
                elif critere_rech == "Age":
                    query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s and age = %s;"
                    cursor.execute(query, (self.ID_groupe, texte_rech,))
                elif critere_rech == "Poids":
                    query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s and poids = %s;"
                    cursor.execute(query, (self.ID_groupe, texte_rech,))
            finally:
                  data = cursor.fetchall()
                  self.tableWidget.clearContents()
                  self.tableWidget.setRowCount(0)
                  for numero_ligne, donnees_ligne in enumerate(data):
                      self.tableWidget.insertRow(numero_ligne)
                      for numero_colonne, donnee_colonne in enumerate(donnees_ligne):
                           item = QtWidgets.QTableWidgetItem(str(donnee_colonne))
                           item.setFont(QtGui.QFont("Arial", 15))
                           self.tableWidget.setItem(numero_ligne, numero_colonne, item)

        except Exception :

            self.msg2 = QtWidgets.QMessageBox()
            self.msg2.setIcon(QtWidgets.QMessageBox.Information)
            self.msg2.setWindowTitle("erreur")
            self.msg2.setText("Attention : veuillez saisir un critere de recherche")
            self.msg2.exec_()
            query = "SELECT ID,nom,prénom,Gender,age,groupes_adhérants.poids FROM groupes_adhérants right join adhérant on id_adhérant=ID where id_adhérant=ID and id_groupe = %s;"
            cursor.execute(query,(self.ID_groupe,))
            data = cursor.fetchall()
            self.tableWidget.clearContents()
            self.tableWidget.setRowCount(0)
            for numero_ligne, donnees_ligne in enumerate(data):
                self.tableWidget.insertRow(numero_ligne)
                for numero_colonne, donnee_colonne in enumerate(donnees_ligne):
                    item = QtWidgets.QTableWidgetItem(str(donnee_colonne))
                    item.setFont(QtGui.QFont("Arial", 15))
                    self.tableWidget.setItem(numero_ligne, numero_colonne, item)

    def suppression(self):
        connection, cursor = connect_to_DB()
        critere_id = self.filterdropdown.currentText()
        supp_id = self.recherche.text()

        if critere_id == "ID":
            query = "select * from groupes_adhérants where id_groupe = %s and id_adhérant=%s"
            cursor.execute(query, (self.ID_groupe,supp_id,))
            existence = cursor.fetchone()
            if existence:
                query = "DELETE FROM groupes_adhérants WHERE id_groupe=%s and id_adhérant = %s"
                cursor.execute(query, (self.ID_groupe,supp_id,))
                self.msg2 = QtWidgets.QMessageBox()
                self.msg2.setIcon(QtWidgets.QMessageBox.Information)
                self.msg.setWindowTitle("Erreur")
                self.msg2.setText("votre abonnement a été supprimé avec succes")
                self.msg2.exec_()
            else:
                self.msg3 = QtWidgets.QMessageBox()
                self.msg3.setIcon(QtWidgets.QMessageBox.Information)
                self.msg.setWindowTitle("Erreur")
                self.msg3.setText("Attention l'ID saisi n'existe pas dans ce groupe")
                self.msg3.exec_()
        else:
            self.msg = QtWidgets.QMessageBox()
            self.msg.setIcon(QtWidgets.QMessageBox.Information)
            self.msg.setText("Il faut supprimer un groupe à partir de son ID seulement")
            self.msg.setWindowTitle("Erreur")
            self.msg.exec_()

            # Fermez le curseur et la connexion à la base de données
        cursor.close()
        connection.close()

from groupe import membresGroupes_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Groupes = QtWidgets.QWidget()
    ui = Ui_Groupe(3)
    ui.setupUi(Groupes)
    Groupes.show()
    sys.exit(app.exec_())
